const { Kafka } = require('kafkajs');
const { Pool } = require('pg');

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'booking_db',
  user: process.env.DB_USER || 'booking_user',
  password: process.env.DB_PASSWORD || 'booking_pass',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

const kafka = new Kafka({
  clientId: 'booking-service',
  brokers: [process.env.KAFKA_BROKER || 'localhost:9092'],
});

const consumer = kafka.consumer({ groupId: 'booking-service-group' });

// ============================================
// –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
// ============================================

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–∏–∫–æ–≤
 * 
 * –ü–û–ß–ï–ú–£ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ù–î–ï–ö–°:
 * - –ë–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ PostgreSQL —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
 * - –° –∏–Ω–¥–µ–∫—Å–æ–º PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç B-tree ‚Äî –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞
 * - B-tree –¥–µ–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ø–æ–ª–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ, –Ω–∞—Ö–æ–¥–∏—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—ã—Å—Ç—Ä–æ
 * - –ù–∞ 10,000 –±—Ä–æ–Ω–µ–π: –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ ~10,000 –æ–ø–µ—Ä–∞—Ü–∏–π, —Å –∏–Ω–¥–µ–∫—Å–æ–º ~13 –æ–ø–µ—Ä–∞—Ü–∏–π
 */
async function checkAvailability(bookingId, restaurantId, bookingDate, bookingTime) {
  const client = await pool.connect();
  
  try {
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    // –ü–û–ß–ï–ú–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ö–†–ò–¢–ò–ß–ù–ê:
    // 
    // –ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (race condition):
    //   –ó–∞–ø—Ä–æ—Å 1: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ‚Üí —Å–≤–æ–±–æ–¥–Ω–æ ‚úì
    //   –ó–∞–ø—Ä–æ—Å 2: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ‚Üí —Å–≤–æ–±–æ–¥–Ω–æ ‚úì
    //   –ó–∞–ø—Ä–æ—Å 1: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω—å
    //   –ó–∞–ø—Ä–æ—Å 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω—å
    //   –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–≤–æ–π–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! ‚ùå
    // 
    // –° –¢–†–ê–ù–ó–ê–ö–¶–ò–ï–ô:
    //   –ó–∞–ø—Ä–æ—Å 1: BEGIN ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Üí COMMIT
    //   –ó–∞–ø—Ä–æ—Å 2: BEGIN ‚Üí –∂–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –≤–∏–¥–∏—Ç –∑–∞–Ω—è—Ç–æ ‚Üí REJECT
    //   –†–µ–∑—É–ª—å—Ç–∞—Ç: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úì
    // 
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å (–≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∏ –æ–¥–Ω–∞) –∏ –∏–∑–æ–ª—è—Ü–∏—é (–∑–∞–ø—Ä–æ—Å—ã –Ω–µ –º–µ—à–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É)
    await client.query('BEGIN');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è"
    await client.query(
      'UPDATE bookings SET status = $1 WHERE id = $2',
      ['CHECKING_AVAILABILITY', bookingId]
    );

    console.log(`üîç Checking availability for booking ${bookingId}`);

    // –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –±—Ä–æ–Ω–∏
    // –ü–û–ß–ï–ú–£ –¢–û–õ–¨–ö–û CONFIRMED:
    // - CREATED –±—Ä–æ–Ω–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
    // - CHECKING_AVAILABILITY ‚Äî –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    // - REJECTED ‚Äî —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã, –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç —Å—Ç–æ–ª–∏–∫
    // - –¢–æ–ª—å–∫–æ CONFIRMED –±—Ä–æ–Ω–∏ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç —Å—Ç–æ–ª–∏–∫
    // 
    // –ü–û–ß–ï–ú–£ id != $4:
    // - –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—å –∏–∑ –ø–æ–∏—Å–∫–∞
    // - –ò–Ω–∞—á–µ –±—Ä–æ–Ω—å –Ω–∞–π–¥–µ—Ç —Å–∞–º—É —Å–µ–±—è –∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—Å—è
    // 
    // –ü–û–ß–ï–ú–£ LIMIT 1:
    // - –ù–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â—É—é –±—Ä–æ–Ω—å
    // - –ù–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Üí –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    const conflictQuery = `
      SELECT id FROM bookings
      WHERE restaurant_id = $1
        AND booking_date = $2
        AND booking_time = $3
        AND status = 'CONFIRMED'
        AND id != $4
      LIMIT 1
    `;

    const conflictResult = await client.query(conflictQuery, [
      restaurantId,
      bookingDate,
      bookingTime,
      bookingId
    ]);

    let newStatus;
    let message;

    if (conflictResult.rows.length > 0) {
      // –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ–º –±—Ä–æ–Ω—å
      newStatus = 'REJECTED';
      message = 'Table already booked for this time';
      console.log(`‚ùå Booking ${bookingId} REJECTED - time slot taken`);
    } else {
      // –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
      newStatus = 'CONFIRMED';
      message = 'Booking confirmed';
      console.log(`‚úÖ Booking ${bookingId} CONFIRMED`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    await client.query(
      'UPDATE bookings SET status = $1 WHERE id = $2',
      [newStatus, bookingId]
    );

    // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');

    return { status: newStatus, message };

  } catch (error) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await client.query('ROLLBACK');
    console.error('‚ùå Error checking availability:', error);
    throw error;
  } finally {
    client.release();
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ Kafka
 * 
 * –ü–û–ß–ï–ú–£ KAFKA CONSUMER:
 * 
 * 1. –ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨:
 *    - API –æ—Ç–≤–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∑–∞ ~50ms
 *    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–¥–µ—Ç –≤ —Ñ–æ–Ω–µ
 *    - –ö–ª–∏–µ–Ω—Ç –Ω–µ –∂–¥–µ—Ç, –ø–æ–ª—É—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
 * 
 * 2. –ù–ê–î–ï–ñ–ù–û–°–¢–¨:
 *    - Kafka —Ö—Ä–∞–Ω–∏—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥–∏—Å–∫–µ
 *    - –ï—Å–ª–∏ Booking Service —É–ø–∞–ª ‚Üí —Å–æ–±—ã—Ç–∏—è –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è
 *    - –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞
 * 
 * 3. –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨:
 *    - –ú–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å 5 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Booking Service
 *    - Kafka –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–æ–±—ã—Ç–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏
 *    - –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–±–ª–∞–≥–æ–¥–∞—Ä—è consumer group)
 * 
 * 4. –†–ê–ó–î–ï–õ–ï–ù–ò–ï –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:
 *    - API Service –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
 *    - Booking Service –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ HTTP
 *    - –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (Email, SMS) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
 */
async function handleBookingEvent(message) {
  try {
    const event = JSON.parse(message.value.toString());
    
    console.log(`üì® Received event: ${event.event_type} for booking ${event.booking_id}`);

    if (event.event_type === 'BOOKING_CREATED') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      await checkAvailability(
        event.booking_id,
        event.restaurant_id,
        event.booking_date,
        event.booking_time
      );
    }

  } catch (error) {
    console.error('‚ùå Error handling event:', error);
    // –í production –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Dead Letter Queue
  }
}

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö
// ============================================

async function start() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Kafka
    await consumer.connect();
    console.log('‚úÖ Kafka consumer connected');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫
    await consumer.subscribe({ 
      topic: 'booking-events', 
      fromBeginning: false // —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
      // –ü–û–ß–ï–ú–£ fromBeginning: false:
      // - true = —á–∏—Ç–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –Ω–∞—á–∞–ª–∞ —Ç–æ–ø–∏–∫–∞ (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
      // - false = —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
      // - Kafka –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç offset (–ø–æ–∑–∏—Ü–∏—é) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ consumer group
      // - –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    });

    console.log('‚úÖ Subscribed to booking-events topic');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
    await consumer.run({
      eachMessage: async ({ topic, partition, message }) => {
        await handleBookingEvent(message);
      },
    });

    console.log('üöÄ Booking Service is running and listening for events...');

  } catch (error) {
    console.error('‚ùå Failed to start Booking Service:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('‚èπÔ∏è  SIGTERM received, shutting down gracefully...');
  await consumer.disconnect();
  await pool.end();
  process.exit(0);
});

start();
