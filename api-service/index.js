const express = require('express');
const { Kafka } = require('kafkajs');
const { Pool } = require('pg');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(express.json());

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================

// PostgreSQL connection pool
// –ü–û–ß–ï–ú–£ POOL:
// - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î = 100-200ms (TCP handshake, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
// - Pool –¥–µ—Ä–∂–∏—Ç –ø—É–ª –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö
// - –í–º–µ—Å—Ç–æ: —Å–æ–∑–¥–∞—Ç—å (200ms) ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Üí –∑–∞–∫—Ä—ã—Ç—å ‚Üí —Å–æ–∑–¥–∞—Ç—å —Å–Ω–æ–≤–∞ (200ms)
// - –ü–æ–ª—É—á–∞–µ–º: –≤–∑—è—Ç—å –∏–∑ –ø—É–ª–∞ (1ms) ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Üí –≤–µ—Ä–Ω—É—Ç—å –≤ –ø—É–ª
// - –ù–∞ 100 –∑–∞–ø—Ä–æ—Å–∞—Ö: 20 —Å–µ–∫—É–Ω–¥ ‚Üí 0.1 —Å–µ–∫—É–Ω–¥—ã
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'booking_db',
  user: process.env.DB_USER || 'booking_user',
  password: process.env.DB_PASSWORD || 'booking_pass',
  max: 20, // –º–∞–∫—Å–∏–º—É–º 20 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Kafka producer
// –ü–û–ß–ï–ú–£ KAFKA (event-driven –ø–æ–¥—Ö–æ–¥):
// 
// –ë–ï–ó KAFKA (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ):
//   Client ‚Üí API ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (2-3 —Å–µ–∫) ‚Üí API ‚Üí Client
//   –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã, –ø–ª–æ—Ö–æ–π UX
// 
// –° KAFKA (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ):
//   Client ‚Üí API ‚Üí Client (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç)
//            ‚Üì
//          Kafka ‚Üí Booking Service (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ñ–æ–Ω–µ)
// 
// –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
// 1. –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (–Ω–µ –∂–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏)
// 2. –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å (–µ—Å–ª–∏ Booking Service —É–ø–∞–ª, —Å–æ–±—ã—Ç–∏—è –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è)
// 3. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å (–º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å 10 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Booking Service)
// 4. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (API —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É)
const kafka = new Kafka({
  clientId: 'api-service',
  brokers: [process.env.KAFKA_BROKER || 'localhost:9092'],
});

const producer = kafka.producer();

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================

async function initKafka() {
  await producer.connect();
  console.log('‚úÖ Kafka producer connected');
}

// ============================================
// API ENDPOINTS
// ============================================

/**
 * POST /bookings
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏
 */
app.post('/bookings', async (req, res) => {
  try {
    const { restaurant_id, booking_date, booking_time, guest_count } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!restaurant_id) {
      return res.status(400).json({ error: 'restaurant_id is required' });
    }
    if (!booking_date) {
      return res.status(400).json({ error: 'booking_date is required' });
    }
    if (!booking_time) {
      return res.status(400).json({ error: 'booking_time is required' });
    }
    if (guest_count === undefined || guest_count === null) {
      return res.status(400).json({ error: 'guest_count is required' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    if (typeof guest_count !== 'number' || guest_count < 1) {
      return res.status(400).json({ 
        error: 'guest_count must be a number greater than or equal to 1',
        received: guest_count
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const bookingId = uuidv4();
    const status = 'CREATED';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Kafka
    // –ü–û–ß–ï–ú–£ –°–ù–ê–ß–ê–õ–ê –ë–î:
    // - –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ Kafka, –Ω–æ –ë–î —É–ø–∞–¥–µ—Ç ‚Üí —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –Ω–µ—Ç (–Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)
    // - –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –ë–î, –Ω–æ Kafka —É–ø–∞–¥–µ—Ç ‚Üí –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –º–æ–∂–µ–º –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    // - –ü—Ä–∏–Ω—Ü–∏–ø: –ë–î = source of truth, Kafka = —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    const query = `
      INSERT INTO bookings (id, restaurant_id, booking_date, booking_time, guest_count, status)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING *
    `;
    
    const result = await pool.query(query, [
      bookingId,
      restaurant_id,
      booking_date,
      booking_time,
      guest_count,
      status
    ]);

    const booking = result.rows[0];

    // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Kafka
    // –ü–û–ß–ï–ú–£ –°–û–ë–´–¢–ò–ï, –ê –ù–ï –ü–†–Ø–ú–û–ô –í–´–ó–û–í:
    // - Booking Service –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí —Å Kafka —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è
    // - –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Email Service) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è API
    // - Kafka –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –∏ –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π
    await producer.send({
      topic: 'booking-events',
      messages: [
        {
          key: bookingId, // –∫–ª—é—á –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          // –ü–û–ß–ï–ú–£ –ö–õ–Æ–ß:
          // - Kafka —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–∞—Ä—Ç–∏—Ü–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –∫–ª—é—á–∞
          // - –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –æ–¥–Ω–∏–º bookingId –ø–æ–ø–∞–¥—É—Ç –≤ –æ–¥–Ω—É –ø–∞—Ä—Ç–∏—Ü–∏—é
          // - –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –±—Ä–æ–Ω–∏
          // - –ë–µ–∑ –∫–ª—é—á–∞ —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
          value: JSON.stringify({
            event_type: 'BOOKING_CREATED',
            booking_id: bookingId,
            restaurant_id,
            booking_date,
            booking_time,
            guest_count,
            timestamp: new Date().toISOString()
          })
        }
      ]
    });

    console.log(`üìù Booking created: ${bookingId}`);

    res.status(201).json({
      message: 'Booking created successfully',
      booking: {
        id: booking.id,
        restaurant_id: booking.restaurant_id,
        booking_date: booking.booking_date,
        booking_time: booking.booking_time,
        guest_count: booking.guest_count,
        status: booking.status,
        created_at: booking.created_at
      }
    });

  } catch (error) {
    console.error('‚ùå Error creating booking:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * GET /bookings/:bookingId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏
 * 
 * –ü–û–ß–ï–ú–£ –ü–û–ò–°–ö –ü–û ID –ë–´–°–¢–†–´–ô:
 * - PRIMARY KEY –≤ PostgreSQL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
 * - –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É = –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∫–µ
 * - –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
 */
app.get('/bookings/:bookingId', async (req, res) => {
  try {
    const { bookingId } = req.params;

    const query = 'SELECT * FROM bookings WHERE id = $1';
    const result = await pool.query(query, [bookingId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Booking not found' });
    }

    const booking = result.rows[0];

    res.json({
      booking: {
        id: booking.id,
        restaurant_id: booking.restaurant_id,
        booking_date: booking.booking_date,
        booking_time: booking.booking_time,
        guest_count: booking.guest_count,
        status: booking.status,
        created_at: booking.created_at,
        updated_at: booking.updated_at
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching booking:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * GET /bookings
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
app.get('/bookings', async (req, res) => {
  try {
    const query = 'SELECT * FROM bookings ORDER BY created_at DESC LIMIT 100';
    const result = await pool.query(query);

    res.json({
      count: result.rows.length,
      bookings: result.rows
    });

  } catch (error) {
    console.error('‚ùå Error fetching bookings:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', service: 'api-service' });
});

// ============================================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ============================================

const PORT = process.env.PORT || 3000;

async function start() {
  try {
    await initKafka();
    
    app.listen(PORT, () => {
      console.log(`üöÄ API Service running on http://localhost:${PORT}`);
      console.log(`üìä Endpoints:`);
      console.log(`   POST   /bookings`);
      console.log(`   GET    /bookings/:bookingId`);
      console.log(`   GET    /bookings`);
      console.log(`   GET    /health`);
    });
  } catch (error) {
    console.error('‚ùå Failed to start API service:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('‚èπÔ∏è  SIGTERM received, shutting down gracefully...');
  await producer.disconnect();
  await pool.end();
  process.exit(0);
});

start();
